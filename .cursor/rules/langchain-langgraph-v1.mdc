---
alwaysApply: true
---
# LangChain & LangGraph v1.0 Development Guidelines

This rule ensures all LangChain and LangGraph code is built using the latest v1.0 documentation and best practices.

## Pre-Development Documentation Check

**BEFORE** writing any code that involves LangChain or LangGraph:

1. **Search for Latest Documentation:**
   - Use `@Web` search to query the latest documentation for the specific feature/component you're implementing
   - Primary documentation source: https://docs.langchain.com/oss/python/langchain
   - Search query format: "LangChain v1.0 [specific feature/component] site:docs.langchain.com"
   - Examples:
     - "LangGraph v1.0 StateGraph workflow site:docs.langchain.com"
     - "LangGraph v1.0 agent workflow site:docs.langchain.com"
     - "LangChain v1.0 vector stores site:docs.langchain.com"

2. **Verify Breaking Changes:**
   - Check for v0.x to v1.0 migration notes
   - Identify deprecated APIs or patterns
   - Look for new recommended approaches

3. **Document Your Research:**
   - Add a comment block at the top of new files indicating:
     - Date documentation was checked
     - Specific LangChain/LangGraph version being targeted
     - Key documentation references used

## LangChain v1.0 Best Practices

### Imports and Versions
```python
# Always use explicit version checking when critical
from langchain import __version__
# Target: v1.0+
# Documentation checked: [DATE]
# Reference: [URL]
```

### Core Architecture Changes in v1.0
**IMPORTANT:** LangChain Expression Language (LCEL) has been **deprecated and removed** in v1.0.

### Simplicity First: Use Built-in Helper Functions
**KEY PRINCIPLE:** Start simple, only go complex when needed.

LangChain v1.0 provides **high-level helper functions** for common tasks:
- ✅ **PREFER**: `create_agent()` for standard agents
- ✅ **PREFER**: Built-in functions like `init_chat_model()` 
- ✅ **PREFER**: Simple, direct APIs over manual graph construction

**Only use manual LangGraph StateGraph when you need:**
- Custom nodes or workflow logic
- Multi-agent coordination
- Human-in-the-loop patterns
- Complex routing or cycles
- Custom state transformations

### Simple Agent Creation (RECOMMENDED)
```python
from langchain.agents import create_agent
from langchain_core.tools import tool

@tool
def my_tool(query: str) -> str:
    """My tool description."""
    return "result"

# That's it! 4 lines for a working agent.
agent = create_agent(
    model="openai:gpt-4o-mini",
    tools=[my_tool],
    system_prompt="You are a helpful assistant."
)
```

### Advanced: Manual LangGraph (Only When Necessary)
When you need custom workflow control:
```python
from langgraph.graph import StateGraph
from typing import TypedDict

class State(TypedDict):
    input: str
    output: str

workflow = StateGraph(State)
workflow.add_node("process", process_function)
workflow.set_entry_point("process")
app = workflow.compile()
```

### Standardized Model Interface
- LangChain v1.0 introduces a unified model interface
- Consistent API across different LLM providers
- Use `.invoke()`, `.batch()`, `.stream()` methods consistently
- Leverage async methods when available (`.ainvoke()`, `.abatch()`)

### Vector Stores and Retrievers
- Use the latest vectorstore implementations
- Implement proper metadata filtering
- Use `.as_retriever()` method for integration with workflows
- Integrate retrievers as nodes in LangGraph workflows

### Memory and Chat History
- Implement memory as part of LangGraph state
- Use persistent state management for conversations
- Avoid legacy memory abstractions like `ConversationBufferMemory`

### Agents and Tools
- **PREFER**: Use `create_agent()` from `langchain.agents` for standard agents
- Define tools using the `@tool` decorator
- Implement proper error handling and fallbacks
- Use structured output parsing with Pydantic models
- Only use manual LangGraph StateGraph for complex custom workflows

## Code Review Checklist

Before committing LangChain/LangGraph code, verify:

- [ ] Latest v1.0 documentation was consulted (web search performed)
- [ ] No deprecated v0.x patterns are used (especially LCEL)
- [ ] **Used simplest approach first** (helper functions before manual graphs)
- [ ] No LCEL pipe operators (`|`) or legacy chain patterns
- [ ] Proper async/await patterns implemented if needed
- [ ] Error handling includes LangChain-specific exceptions
- [ ] Type hints are used throughout
- [ ] Pydantic models used for structured I/O
- [ ] Documentation comments reference specific v1.0 docs
- [ ] Environment variables properly configured (API keys, etc.)
- [ ] Rate limiting and cost management considered

## Common Migration Issues (v0.x → v1.0)

Watch out for these breaking changes:

1. **LCEL Removal (CRITICAL):**
   - ❌ Deprecated: All LCEL patterns including pipe operator (`|`)
   - ❌ Deprecated: `prompt | llm | output_parser`
   - ✅ New: Use helper functions OR LangGraph for custom workflows

2. **Chain Construction:**
   - ❌ Old: `LLMChain(llm=llm, prompt=prompt)`
   - ❌ Old: Any LCEL chain patterns
   - ✅ New: For simple cases, use direct model invocation
   - ✅ New: For complex workflows, use LangGraph StateGraph

3. **Agent Creation:**
   - ❌ Old: `initialize_agent(...)`
   - ❌ Old: v0.x `create_react_agent(...)` with LCEL
   - ✅ **PREFERRED**: `create_agent()` from `langchain.agents`
   - ✅ Advanced: Manual LangGraph StateGraph for custom workflows
   - Example (simple):
     ```python
     from langchain.agents import create_agent
     
     agent = create_agent(
         model="openai:gpt-4o-mini",
         tools=[my_tool],
         system_prompt="You are helpful."
     )
     ```

4. **Memory:**
   - ❌ Old: `ConversationBufferMemory`
   - ❌ Old: `RunnableWithMessageHistory`
   - ✅ New: State management within LangGraph workflows

5. **Output Parsing:**
   - ❌ Old: Custom string parsing
   - ✅ New: Structured output with `.with_structured_output()` and Pydantic
   - ✅ New: Parse nodes in LangGraph workflows

6. **Callbacks:**
   - ❌ Old: Direct callback handlers
   - ✅ New: LangGraph persistence and checkpoint system

## Testing Requirements

All LangChain/LangGraph code must include:

- Unit tests with mocked LLM responses
- Integration tests with actual API calls (in separate test suite)
- Error handling tests (rate limits, API failures, malformed responses)
- Token usage and cost estimation validation

## Documentation Requirements

Each LangChain/LangGraph module must have:

```python
"""
Module: [module_name]
Purpose: [brief description]

LangChain Version: v1.0+
Documentation Reference: [URL]
Last Updated: [DATE]

Key Components:
- [Component 1]: [description]
- [Component 2]: [description]

Dependencies:
- langchain>=1.0.0
- langchain-community>=1.0.0
- [other specific packages]
"""
```

## AI Assistant Instructions

When the user asks you to implement LangChain or LangGraph functionality:

1. **START SIMPLE**: Check if there's a built-in helper function first
   - For agents: Try `create_agent()` before manual StateGraph
   - For models: Try `init_chat_model()` before custom setup
   - For standard patterns: Use helper functions

2. **ONLY GO COMPLEX when needed**:
   - User explicitly requests custom workflow
   - Need features not available in helper functions
   - Building multi-agent systems or advanced patterns

3. **Documentation Check**:
   - Perform web search: `@Web "LangChain v1.0 [feature] site:docs.langchain.com"`
   - Read and synthesize findings before writing code
   - Reference specific documentation URLs in comments

4. **Explain** what you learned from the docs before implementing

5. **Flag** any areas where documentation is unclear or conflicting

6. **KISS Principle**: Keep It Simple, Stupid
   - Prefer readability over cleverness
   - Prefer built-in functions over manual construction
   - Only add complexity when there's a clear benefit

7. **Test** code with realistic examples

## Resources

All v1.0 documentation is hosted at docs.langchain.com:

- **Primary Docs**: https://docs.langchain.com/
- **LangChain (Python)**: https://docs.langchain.com/oss/python/langchain
- **LangGraph (Python)**: https://docs.langchain.com/oss/python/langgraph
- **Migration to v1.0**: https://docs.langchain.com/oss/python/migrate/langgraph-v1
- **LangSmith Platform**: https://docs.langchain.com/langsmith
- **MCP Server** (Programmatic Access): https://docs.langchain.com/mcp
- **GitHub**: https://github.com/langchain-ai/langchain

## Version Tracking

This rule was created for LangChain v1.0+ (October 2024 onwards)
Last updated: October 22, 2025
